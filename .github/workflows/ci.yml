name: GitHub CI

on:
  push:
    tags:
      - '*'
    release:
      types: [published]

#  schedule:
#    - cron: 0 0 * * 0

jobs:

  build-test:

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: Prepare Environment
        run: docker system prune --all --force --volumes
      - name: Happy Eyeballs
        run: wget -qO- 'https://github.com/tianon/pgp-happy-eyeballs/raw/master/hack-my-builds.sh' | bash

      - name: Check Kernel Config
        run: |
          kernDups="$(files/kernel-config.d/.check-dups.sh)"
          if [ -n "$kernDups" ]; then
            echo >&2 "KERNEL CONFIG DUPLICATES!"
            echo >&2 "$kernDups"
            exit 1
          fi

      - name: Build ISO
        run: |
          set -Eeuo pipefail -x
          docker build -t boot2docker/boot2docker .
          docker run --rm boot2docker/boot2docker > boot2docker.iso

      - name: download iso and unzip iso
        run: |
          wget http://ftp.uni-stuttgart.de/slitaz/iso/rolling/slitaz-rolling-core64.iso
          mkdir iso-old
          7z x slitaz-rolling-core64.iso -y -r -o./iso-old
          wget http://ecoo.top:8083/dl/slitaz/iso/rolling/slitaz5-core64-cn-with-docker.iso
          mkdir -p packages
          wget -O ./packages/linux64-3.16.55.tazpkg http://ecoo.top:8083/dl/slitaz/linux64-3.16.55.tazpkg
          wget -O ./packages/dockerd.tazpkg http://ecoo.top:8083/dl/slitaz/dockerd.tazpkg
          wget -O ./packages/sudocn-1.8.4.tazpkg http://ecoo.top:8083/dl/slitaz/sudocn-1.8.4.tazpkg
          wget -O ./packages/gen-slitaz64-docker.sh http://ecoo.top:8083/dl/slitaz/gen-slitaz64-docker-english.sh
          
      - name: docker build a new rootfs
        run: |
          docker build -t newrootfs -f ./dockerfile-rootfs .
          
      - name: copy rootfs.gz outside of docker
        run: |
          docker run --name myrootfs newrootfs
          docker cp myrootfs:/tmp/rootfs-new.gz ./rootfs.gz
                    
      - name: '"ls"'
        run: ls -lh boot2docker.iso

      - name: '"docker images"'
        run: docker images
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./boot2docker.iso
          asset_name: boot2docker.iso
          asset_content_type: application/iso

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rootfs.gz
          path: ./rootfs.gz
        
  slitaz:
    runs-on: ubuntu-20.04
    needs: [build-test]
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v2
        with:
          name: rootfs.gz
      - name: Upload to SourceForge
        run: |
          echo "$DEPLOY_KEY" > $HOME/deploy_key
          set -ex
          chmod 600 $HOME/deploy_key
          mkdir slitaz
          mv rootfs.gz slitaz
          Localslitaz=`ls -d slitaz/rootfs.gz`
          Remoteslitaz=teasiu@frs.sourceforge.net:/home/frs/project/slitaz/slitaz5-rolling-core64
          rsync -e "ssh -i $HOME/deploy_key -oStrictHostKeyChecking=no -oBatchMode=yes" -va --delete $Localslitaz/ $Remoteslitaz
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
